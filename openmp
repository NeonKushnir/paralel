#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <omp.h>

using namespace std;

// Злиття двох відсортованих підмасивів
void merge(vector<int>& arr, vector<int>& temp, int left, int mid, int right) {
    int i = left, j = mid, k = left;
    while (i < mid && j < right) {
        if (arr[i] < arr[j]) temp[k++] = arr[i++];
        else temp[k++] = arr[j++];
    }
    while (i < mid) temp[k++] = arr[i++];
    while (j < right) temp[k++] = arr[j++];
    for (int l = left; l < right; ++l)
        arr[l] = temp[l];
}

// Рекурсивне MergeSort
void mergeSort(vector<int>& arr, vector<int>& temp, int left, int right, int threshold) {
    if (right - left <= 1) return;
    int mid = (left + right) / 2;

    if (right - left > threshold) {
#pragma omp task shared(arr, temp) firstprivate(left, mid, right, threshold)
        mergeSort(arr, temp, left, mid, threshold);
#pragma omp task shared(arr, temp) firstprivate(left, mid, right, threshold)
        mergeSort(arr, temp, mid, right, threshold);
#pragma omp taskwait
    }
    else {
        mergeSort(arr, temp, left, mid, threshold);
        mergeSort(arr, temp, mid, right, threshold);
    }

    merge(arr, temp, left, mid, right);
}

// Перевірка правильності сортування
bool isSorted(const vector<int>& arr) {
    for (size_t i = 1; i < arr.size(); ++i)
        if (arr[i - 1] > arr[i]) return false;
    return true;
}

int main() {
    const int totalSize = 1000000;
    const int threshold = 10000; // Поріг для створення тасків

    vector<int> arr(totalSize), temp(totalSize);
    srand(time(0));
    for (int i = 0; i < totalSize; ++i)
        arr[i] = rand() % 100000;

    omp_set_num_threads(16);
    int maxThreads = omp_get_max_threads();

    double start = omp_get_wtime();

#pragma omp parallel
    {
#pragma omp single nowait
        mergeSort(arr, temp, 0, arr.size(), threshold);
    }

    double end = omp_get_wtime();

    cout << "Total elements sorted: " << totalSize << endl;
    cout << "Number of threads: " << maxThreads << endl;
    cout << "Total elapsed time: " << end - start << " seconds" << endl;
    cout << "Sorting correct: " << (isSorted(arr) ? "Yes" : "No") << endl;

    return 0;
}
