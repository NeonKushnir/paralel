#include <mpi.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <ctime>

using namespace std;

// Злиття двох відсортованих підмасивів: [left, mid) та [mid, right)
void merge(vector<int>& arr, vector<int>& temp, int left, int mid, int right) {
    int i = left, j = mid, k = left;
    while (i < mid && j < right) {
        if (arr[i] < arr[j]) temp[k++] = arr[i++];
        else temp[k++] = arr[j++];
    }
    while (i < mid) temp[k++] = arr[i++];
    while (j < right) temp[k++] = arr[j++];
    for (int l = left; l < right; ++l)
        arr[l] = temp[l];
}

// Рекурсивне MergeSort (без OpenMP директив, чисто для MPI)
void mergeSort(vector<int>& arr, vector<int>& temp, int left, int right, int threshold) {
    if (right - left <= 1) return;
    int mid = (left + right) / 2;

    if (right - left > threshold) {
        mergeSort(arr, temp, left, mid, threshold);
        mergeSort(arr, temp, mid, right, threshold);
    }
    else {
        mergeSort(arr, temp, left, mid, threshold);
        mergeSort(arr, temp, mid, right, threshold);
    }

    merge(arr, temp, left, mid, right);
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    const int totalSize = 1000000;
    const int threshold = 1000;
    vector<int> fullData;

    // Генерація повного масиву даних
    if (rank == 0) {
        srand(time(0));
        fullData.resize(totalSize);
        for (int i = 0; i < totalSize; ++i)
            fullData[i] = rand() % 100000;
    }

    // Кожен процес отримує однакову кількість елементів
    int localSize = totalSize / size;
    vector<int> localData(localSize);
    vector<int> temp(localSize);

    // Розсилка частин масиву всім процесам
    MPI_Scatter(fullData.data(), localSize, MPI_INT,
        localData.data(), localSize, MPI_INT,
        0, MPI_COMM_WORLD);

    // Засікаємо час
    double startTime = MPI_Wtime();

    // Локальне сортування
    mergeSort(localData, temp, 0, localSize, threshold);

    // Паралельне злиття результатів
    int step = 1;
    while (step < size) {
        if (rank % (2 * step) == 0) {
            if (rank + step < size) {
                int incomingSize;
                MPI_Recv(&incomingSize, 1, MPI_INT, rank + step, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                vector<int> incoming(incomingSize), incomingTemp(incomingSize);
                MPI_Recv(incoming.data(), incomingSize, MPI_INT, rank + step, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

                // Розширення локального буфера
                vector<int> combined(localData.size() + incomingSize);
                copy(localData.begin(), localData.end(), combined.begin());
                copy(incoming.begin(), incoming.end(), combined.begin() + localData.size());

                vector<int> combinedTemp(combined.size());
                mergeSort(combined, combinedTemp, 0, combined.size(), threshold);
                localData = combined;
            }
        }
        else {
            int dest = rank - step;
            int s = localData.size();
            MPI_Send(&s, 1, MPI_INT, dest, 0, MPI_COMM_WORLD);
            MPI_Send(localData.data(), s, MPI_INT, dest, 0, MPI_COMM_WORLD);
            break;
        }
        step *= 2;
    }

    double endTime = MPI_Wtime();
    double localTotalTime = endTime - startTime;

    // Збір часу
    double* allTimes = nullptr;
    if (rank == 0)
        allTimes = new double[size];

    MPI_Gather(&localTotalTime, 1, MPI_DOUBLE,
        allTimes, 1, MPI_DOUBLE,
        0, MPI_COMM_WORLD);

    // Вивід результатів
    if (rank == 0) {
        double globalMax = *max_element(allTimes, allTimes + size);

        cout << "Total elements sorted: " << totalSize << endl;
        cout << "Number of processes: " << size << endl;
        cout << "Total elapsed time: " << globalMax << " seconds" << endl;

        for (int i = 0; i < size; ++i)
            cout << "Process " << i << " execution time: " << allTimes[i] << " seconds" << endl;

        delete[] allTimes;
    }

    MPI_Finalize();
    return 0;
}
